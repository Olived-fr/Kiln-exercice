// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "kiln-exercice/internal/model"
)

// DelegationRepository is an autogenerated mock type for the DelegationRepository type
type DelegationRepository struct {
	mock.Mock
}

type DelegationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *DelegationRepository) EXPECT() *DelegationRepository_Expecter {
	return &DelegationRepository_Expecter{mock: &_m.Mock}
}

// ListDelegations provides a mock function with given fields: ctx, year, offset, limit
func (_m *DelegationRepository) ListDelegations(ctx context.Context, year int, offset int, limit int) ([]model.Delegation, error) {
	ret := _m.Called(ctx, year, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListDelegations")
	}

	var r0 []model.Delegation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) ([]model.Delegation, error)); ok {
		return rf(ctx, year, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) []model.Delegation); ok {
		r0 = rf(ctx, year, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Delegation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = rf(ctx, year, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DelegationRepository_ListDelegations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDelegations'
type DelegationRepository_ListDelegations_Call struct {
	*mock.Call
}

// ListDelegations is a helper method to define mock.On call
//   - ctx context.Context
//   - year int
//   - offset int
//   - limit int
func (_e *DelegationRepository_Expecter) ListDelegations(ctx interface{}, year interface{}, offset interface{}, limit interface{}) *DelegationRepository_ListDelegations_Call {
	return &DelegationRepository_ListDelegations_Call{Call: _e.mock.On("ListDelegations", ctx, year, offset, limit)}
}

func (_c *DelegationRepository_ListDelegations_Call) Run(run func(ctx context.Context, year int, offset int, limit int)) *DelegationRepository_ListDelegations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *DelegationRepository_ListDelegations_Call) Return(_a0 []model.Delegation, _a1 error) *DelegationRepository_ListDelegations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DelegationRepository_ListDelegations_Call) RunAndReturn(run func(context.Context, int, int, int) ([]model.Delegation, error)) *DelegationRepository_ListDelegations_Call {
	_c.Call.Return(run)
	return _c
}

// NewDelegationRepository creates a new instance of DelegationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDelegationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DelegationRepository {
	mock := &DelegationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
