// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	model "kiln-exercice/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// PollingRepository is an autogenerated mock type for the PollingRepository type
type PollingRepository struct {
	mock.Mock
}

type PollingRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PollingRepository) EXPECT() *PollingRepository_Expecter {
	return &PollingRepository_Expecter{mock: &_m.Mock}
}

// GetLastPolling provides a mock function with given fields: ctx
func (_m *PollingRepository) GetLastPolling(ctx context.Context) (model.Polling, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastPolling")
	}

	var r0 model.Polling
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (model.Polling, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) model.Polling); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(model.Polling)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PollingRepository_GetLastPolling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastPolling'
type PollingRepository_GetLastPolling_Call struct {
	*mock.Call
}

// GetLastPolling is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PollingRepository_Expecter) GetLastPolling(ctx interface{}) *PollingRepository_GetLastPolling_Call {
	return &PollingRepository_GetLastPolling_Call{Call: _e.mock.On("GetLastPolling", ctx)}
}

func (_c *PollingRepository_GetLastPolling_Call) Run(run func(ctx context.Context)) *PollingRepository_GetLastPolling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PollingRepository_GetLastPolling_Call) Return(_a0 model.Polling, _a1 error) *PollingRepository_GetLastPolling_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PollingRepository_GetLastPolling_Call) RunAndReturn(run func(context.Context) (model.Polling, error)) *PollingRepository_GetLastPolling_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertPolling provides a mock function with given fields: ctx, polling
func (_m *PollingRepository) UpsertPolling(ctx context.Context, polling model.Polling) error {
	ret := _m.Called(ctx, polling)

	if len(ret) == 0 {
		panic("no return value specified for UpsertPolling")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Polling) error); ok {
		r0 = rf(ctx, polling)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PollingRepository_UpsertPolling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertPolling'
type PollingRepository_UpsertPolling_Call struct {
	*mock.Call
}

// UpsertPolling is a helper method to define mock.On call
//   - ctx context.Context
//   - polling model.Polling
func (_e *PollingRepository_Expecter) UpsertPolling(ctx interface{}, polling interface{}) *PollingRepository_UpsertPolling_Call {
	return &PollingRepository_UpsertPolling_Call{Call: _e.mock.On("UpsertPolling", ctx, polling)}
}

func (_c *PollingRepository_UpsertPolling_Call) Run(run func(ctx context.Context, polling model.Polling)) *PollingRepository_UpsertPolling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Polling))
	})
	return _c
}

func (_c *PollingRepository_UpsertPolling_Call) Return(_a0 error) *PollingRepository_UpsertPolling_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PollingRepository_UpsertPolling_Call) RunAndReturn(run func(context.Context, model.Polling) error) *PollingRepository_UpsertPolling_Call {
	_c.Call.Return(run)
	return _c
}

// NewPollingRepository creates a new instance of PollingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPollingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PollingRepository {
	mock := &PollingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
