// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	model "kiln-exercice/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// DelegationRepository is an autogenerated mock type for the DelegationRepository type
type DelegationRepository struct {
	mock.Mock
}

type DelegationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *DelegationRepository) EXPECT() *DelegationRepository_Expecter {
	return &DelegationRepository_Expecter{mock: &_m.Mock}
}

// InsertDelegations provides a mock function with given fields: ctx, delegations
func (_m *DelegationRepository) InsertDelegations(ctx context.Context, delegations []model.Delegation) error {
	ret := _m.Called(ctx, delegations)

	if len(ret) == 0 {
		panic("no return value specified for InsertDelegations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.Delegation) error); ok {
		r0 = rf(ctx, delegations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelegationRepository_InsertDelegations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertDelegations'
type DelegationRepository_InsertDelegations_Call struct {
	*mock.Call
}

// InsertDelegations is a helper method to define mock.On call
//   - ctx context.Context
//   - delegations []model.Delegation
func (_e *DelegationRepository_Expecter) InsertDelegations(ctx interface{}, delegations interface{}) *DelegationRepository_InsertDelegations_Call {
	return &DelegationRepository_InsertDelegations_Call{Call: _e.mock.On("InsertDelegations", ctx, delegations)}
}

func (_c *DelegationRepository_InsertDelegations_Call) Run(run func(ctx context.Context, delegations []model.Delegation)) *DelegationRepository_InsertDelegations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]model.Delegation))
	})
	return _c
}

func (_c *DelegationRepository_InsertDelegations_Call) Return(_a0 error) *DelegationRepository_InsertDelegations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DelegationRepository_InsertDelegations_Call) RunAndReturn(run func(context.Context, []model.Delegation) error) *DelegationRepository_InsertDelegations_Call {
	_c.Call.Return(run)
	return _c
}

// NewDelegationRepository creates a new instance of DelegationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDelegationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DelegationRepository {
	mock := &DelegationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
